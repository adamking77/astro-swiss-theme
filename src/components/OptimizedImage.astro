---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
  src: string | ImageMetadata;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  decoding?: 'async' | 'sync' | 'auto';
  quality?: number;
  format?: 'avif' | 'webp' | 'jpeg' | 'png' | 'svg';
  sizes?: string;
  fit?: 'cover' | 'contain' | 'fill' | 'inside' | 'outside';
  position?: 'top' | 'right top' | 'right' | 'right bottom' | 'bottom' | 'left bottom' | 'left' | 'left top' | 'center';
  priority?: boolean;
}

const {
  src,
  alt,
  width,
  height,
  class: className = '',
  loading = 'lazy',
  decoding = 'async',
  quality = 80,
  format = 'webp',
  sizes,
  fit = 'cover',
  position = 'center',
  priority = false,
} = Astro.props;

// If priority is true, set loading to eager for above-the-fold images
const loadingStrategy = priority ? 'eager' : loading;

// Generate responsive sizes if not provided
const responsiveSizes = sizes || '(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw';

// Determine if this is an external URL or local asset
const isExternalUrl = typeof src === 'string' && (src.startsWith('http') || src.startsWith('//'));
const isDataUrl = typeof src === 'string' && src.startsWith('data:');
---

{isExternalUrl || isDataUrl ? (
  <!-- External images or data URLs use regular img tag with optimization attributes -->
  <img 
    src={src}
    alt={alt}
    width={width}
    height={height}
    class={className}
    loading={loadingStrategy}
    decoding={decoding}
    sizes={responsiveSizes}
  />
) : (
  <!-- Local images use Astro's optimized Image component -->
  <Image
    src={src}
    alt={alt}
    width={width}
    height={height}
    class={className}
    loading={loadingStrategy}
    decoding={decoding}
    quality={quality}
    format={format}
    sizes={responsiveSizes}
    fit={fit}
    position={position}
  />
)}

<style>
  img, picture {
    /* Ensure images maintain aspect ratio and don't overflow */
    max-width: 100%;
    height: auto;
  }
  
  /* Add subtle loading animation */
  img[loading="lazy"] {
    transition: opacity 0.3s ease-in-out;
  }
  
  /* Prevent layout shift during loading */
  img {
    background-color: hsl(var(--muted));
    border-radius: var(--radius);
  }
</style>