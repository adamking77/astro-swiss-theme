---
import type { DataVisualizationProps } from '../../types/reports';

interface Props extends DataVisualizationProps {}

const { data = {} } = Astro.props;

// Default fallback data
const defaultData = {
  title: "Data Visualization",
  subtitle: "Performance analytics and metrics dashboard",
  chartPlaceholder: "Interactive Data Dashboard\n\nðŸ“Š Real-time performance metrics\nðŸ“ˆ Trend analysis and forecasting\nðŸŽ¯ Key performance indicators\nðŸ“‹ Comprehensive reporting suite\n\nData visualization provides comprehensive insights across all operational metrics",
  performanceMetrics: {
    title: "Performance Analytics",
    description: "Comprehensive data visualization showcasing key performance indicators and operational metrics across all business segments."
  },
  uptime: {
    label: "System Performance",
    percentage: 95
  },
  efficiency: {
    label: "Operational Efficiency", 
    percentage: 88
  }
};

const vizData = { ...defaultData, ...data };
---
<section class="py-16 lg:py-20 bg-background">
  <div class="max-w-6xl mx-auto px-20 lg:px-24">
    <div class="space-y-20">
      <div class="text-center space-y-8 opacity-100 translate-y-0 transition-all duration-1000" data-animate="viz-title">
        <h2 class="text-4xl md:text-5xl font-light leading-tight tracking-tight text-foreground hover:scale-105 transition-transform duration-300">
          {vizData.title}
        </h2>
        {vizData.subtitle && (
          <p class="text-lg font-light text-foreground/70 leading-relaxed max-w-2xl mx-auto">
            {vizData.subtitle}
          </p>
        )}
        <div class="w-12 h-px bg-foreground/20 mx-auto transition-all duration-1000 hover:w-24"></div>
      </div>

      <div class="grid lg:grid-cols-12 gap-16">
        <div class="lg:col-span-7">
          <div class="space-y-8">
            {(vizData.performanceMetrics || vizData.expansionMetrics) && (
              <div class="space-y-6">
                <h3 class="text-xl font-light text-foreground hover:scale-105 transition-transform duration-300">
                  {(vizData.performanceMetrics?.title || vizData.expansionMetrics?.title)}
                </h3>
                <p class="text-base font-light text-foreground/70 leading-relaxed">
                  {(vizData.performanceMetrics?.description || vizData.expansionMetrics?.description)}
                </p>
              </div>
            )}
            
            <div class="h-80 w-full group cursor-pointer opacity-100 translate-y-0 transition-all duration-1000 delay-200" data-animate="viz-chart">
              <div class="w-full h-full border border-foreground/20 rounded-lg bg-foreground/5 hover:bg-foreground/10 transition-colors duration-300 p-6">
                <div class="w-full h-full flex flex-col">
                  <!-- Chart Title -->
                  <div class="text-center mb-6">
                    <h4 class="text-lg font-light text-foreground mb-2">Performance Overview</h4>
                    <p class="text-xs text-foreground/60">Interactive Data Dashboard</p>
                  </div>
                  
                  <!-- Demo Bar Chart -->
                  <div class="flex-1 flex items-end justify-between space-x-3 px-4">
                    <div class="flex flex-col items-center space-y-2 flex-1">
                      <div class="w-full bg-foreground/10 rounded-t-lg flex flex-col justify-end" style="height: 180px;">
                        <div class="bg-foreground/70 rounded-t-lg transition-all duration-1000 hover:bg-foreground" style="height: 75%;"></div>
                      </div>
                      <div class="text-xs font-light text-foreground/60 text-center">Q1</div>
                      <div class="text-sm font-light text-foreground">85%</div>
                    </div>
                    
                    <div class="flex flex-col items-center space-y-2 flex-1">
                      <div class="w-full bg-foreground/10 rounded-t-lg flex flex-col justify-end" style="height: 180px;">
                        <div class="bg-foreground/70 rounded-t-lg transition-all duration-1000 hover:bg-foreground" style="height: 92%;"></div>
                      </div>
                      <div class="text-xs font-light text-foreground/60 text-center">Q2</div>
                      <div class="text-sm font-light text-foreground">92%</div>
                    </div>
                    
                    <div class="flex flex-col items-center space-y-2 flex-1">
                      <div class="w-full bg-foreground/10 rounded-t-lg flex flex-col justify-end" style="height: 180px;">
                        <div class="bg-foreground/70 rounded-t-lg transition-all duration-1000 hover:bg-foreground" style="height: 68%;"></div>
                      </div>
                      <div class="text-xs font-light text-foreground/60 text-center">Q3</div>
                      <div class="text-sm font-light text-foreground">68%</div>
                    </div>
                    
                    <div class="flex flex-col items-center space-y-2 flex-1">
                      <div class="w-full bg-foreground/10 rounded-t-lg flex flex-col justify-end" style="height: 180px;">
                        <div class="bg-foreground/70 rounded-t-lg transition-all duration-1000 hover:bg-foreground" style="height: 96%;"></div>
                      </div>
                      <div class="text-xs font-light text-foreground/60 text-center">Q4</div>
                      <div class="text-sm font-light text-foreground">96%</div>
                    </div>
                    
                    <div class="flex flex-col items-center space-y-2 flex-1">
                      <div class="w-full bg-foreground/10 rounded-t-lg flex flex-col justify-end" style="height: 180px;">
                        <div class="bg-foreground/50 rounded-t-lg transition-all duration-1000 hover:bg-foreground/60" style="height: 84%;"></div>
                      </div>
                      <div class="text-xs font-light text-foreground/60 text-center">Proj</div>
                      <div class="text-sm font-light text-foreground">84%</div>
                    </div>
                  </div>
                  
                  <!-- Chart Legend -->
                  <div class="flex justify-center items-center space-x-6 mt-4 pt-4 border-t border-foreground/10">
                    <div class="flex items-center space-x-2">
                      <div class="w-3 h-3 bg-foreground/70 rounded"></div>
                      <span class="text-xs font-light text-foreground/70">Actual Performance</span>
                    </div>
                    <div class="flex items-center space-x-2">
                      <div class="w-3 h-3 bg-foreground/50 rounded"></div>
                      <span class="text-xs font-light text-foreground/70">Projected</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="lg:col-span-5">
          <div class="space-y-12">
            {(vizData.uptime || vizData.efficiency || vizData.coverage || vizData.integration) && (
              <div class="space-y-8">
                {vizData.uptime && (
                  <div class="group cursor-pointer hover:scale-105 transition-all duration-300">
                    <div class="bg-background/80 backdrop-blur-sm border border-foreground/10 rounded-lg p-6 space-y-4 hover:border-foreground/30 hover:shadow-xl transition-all duration-300">
                      <div class="flex justify-between items-end mb-2">
                        <span class="text-sm font-light text-foreground">{vizData.uptime.label}</span>
                        <span class="text-xl font-light text-foreground group-hover:text-foreground/80 transition-colors duration-300">{vizData.uptime.percentage}%</span>
                      </div>
                      <div class="w-full bg-foreground/10 h-2 rounded-full overflow-hidden">
                        <div
                          class="bg-foreground h-full rounded-full transition-all duration-1000"
                          style={`width: ${vizData.uptime.percentage}%`}
                        />
                      </div>
                    </div>
                  </div>
                )}

                {vizData.efficiency && (
                  <div class="group cursor-pointer hover:scale-105 transition-all duration-300">
                    <div class="bg-background/80 backdrop-blur-sm border border-foreground/10 rounded-lg p-6 space-y-4 hover:border-foreground/30 hover:shadow-xl transition-all duration-300">
                      <div class="flex justify-between items-end mb-2">
                        <span class="text-sm font-light text-foreground">{vizData.efficiency.label}</span>
                        <span class="text-xl font-light text-foreground group-hover:text-foreground/80 transition-colors duration-300">{vizData.efficiency.percentage}%</span>
                      </div>
                      <div class="w-full bg-foreground/10 h-2 rounded-full overflow-hidden">
                        <div
                          class="bg-foreground/70 h-full rounded-full transition-all duration-1000"
                          style={`width: ${vizData.efficiency.percentage}%`}
                        />
                      </div>
                    </div>
                  </div>
                )}

                {vizData.coverage && (
                  <div class="group cursor-pointer hover:scale-105 transition-all duration-300">
                    <div class="bg-background/80 backdrop-blur-sm border border-foreground/10 rounded-lg p-6 space-y-4 hover:border-foreground/30 hover:shadow-xl transition-all duration-300">
                      <div class="flex justify-between items-end mb-2">
                        <span class="text-sm font-light text-foreground">{vizData.coverage.label}</span>
                        <span class="text-xl font-light text-foreground group-hover:text-foreground/80 transition-colors duration-300">{vizData.coverage.percentage}%</span>
                      </div>
                      <div class="w-full bg-foreground/10 h-2 rounded-full overflow-hidden">
                        <div
                          class="bg-foreground/50 h-full rounded-full transition-all duration-1000"
                          style={`width: ${vizData.coverage.percentage}%`}
                        />
                      </div>
                    </div>
                  </div>
                )}

                {vizData.integration && (
                  <div class="group cursor-pointer hover:scale-105 transition-all duration-300">
                    <div class="bg-background/80 backdrop-blur-sm border border-foreground/10 rounded-lg p-6 space-y-4 hover:border-foreground/30 hover:shadow-xl transition-all duration-300">
                      <div class="flex justify-between items-end mb-2">
                        <span class="text-sm font-light text-foreground">{vizData.integration.label}</span>
                        <span class="text-xl font-light text-foreground group-hover:text-foreground/80 transition-colors duration-300">{vizData.integration.percentage}%</span>
                      </div>
                      <div class="w-full bg-foreground/10 h-2 rounded-full overflow-hidden">
                        <div
                          class="bg-foreground/30 h-full rounded-full transition-all duration-1000"
                          style={`width: ${vizData.integration.percentage}%`}
                        />
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('astro:page-load', () => {
    const observerOptions = {
      threshold: 0.2,
      rootMargin: '0px'
    };

    // Observe elements with progressive delays
    const elementsWithDelays = [
      { selector: '[data-animate="viz-title"]', delay: 0 },
      { selector: '[data-animate="viz-chart"]', delay: 200 }
    ];

    elementsWithDelays.forEach(({ selector, delay }) => {
      const element = document.querySelector(selector);
      if (element) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const targetElement = entry.target as HTMLElement;
              setTimeout(() => {
                targetElement.classList.remove('opacity-0', 'translate-y-10');
                targetElement.classList.add('opacity-100', 'translate-y-0');
              }, delay);
            }
          });
        }, observerOptions);

        observer.observe(element);
      }
    });
  });
</script>