---
interface Props {
  data?: {
    title?: string;
    subtitle?: string;
    description?: string;
    chartPlaceholder?: string;
    metrics?: {
      marketGrowth?: {
        value: string;
        label: string;
      };
      confidence?: {
        value: string;
        label: string;
      };
    };
  };
}

const { data = {} } = Astro.props;

// Default fallback data
const defaultData = {
  title: "Market Analysis",
  subtitle: "",
  description: "Comprehensive market research reveals significant growth opportunities across key sectors, with emerging trends indicating a 30% year-over-year expansion.",
  chartPlaceholder: "[Placeholder for Line Chart]\n(Originally implemented with Recharts)",
  metrics: {
    marketGrowth: {
      value: "+24%",
      label: "MARKET GROWTH"
    },
    confidence: {
      value: "87%",
      label: "CONFIDENCE"
    }
  }
};

const marketData = { ...defaultData, ...data };
// Note: This component originally used 'recharts' for a LineChart and 'useScrollTrigger'.
// For this structural conversion, the chart is represented by a placeholder.
// Full implementation will require a client-side charting solution compatible with Astro.
// Removed animation-delay styles for this structural conversion.
---
<section class="py-16 lg:py-20">
  <div class="max-w-4xl mx-auto px-20 lg:px-24">
    <div class="grid lg:grid-cols-12 gap-16">
      <div class="lg:col-span-5 lg:col-start-8">
        <div class="space-y-8 opacity-100 translate-y-0 transition-all duration-1000" data-animate="market-content">
          <h2 class="text-4xl md:text-5xl font-light leading-tight tracking-tight text-foreground hover:scale-105 transition-transform duration-300">
            {marketData.title}
          </h2>
          <div class="w-12 h-px bg-foreground/20 transition-all duration-1000 hover:w-24"></div>
          <div class="space-y-6">
            <p class="text-base font-light text-foreground leading-relaxed">
              {marketData.description}
            </p>
            <div class="grid grid-cols-2 gap-6">
              <div class="group cursor-pointer hover:scale-110 transition-all duration-300"> {/* Removed animate-fade-in and style */}
                <div class="text-xl font-light mb-1 text-foreground group-hover:text-foreground/80 transition-colors duration-300">{marketData.metrics?.marketGrowth?.value}</div>
                <div class="text-xs font-light text-foreground tracking-wider">{marketData.metrics?.marketGrowth?.label}</div>
              </div>
              <div class="group cursor-pointer hover:scale-110 transition-all duration-300"> {/* Removed animate-fade-in and style */}
                <div class="text-xl font-light mb-1 text-foreground group-hover:text-foreground/80 transition-colors duration-300">{marketData.metrics?.confidence?.value}</div>
                <div class="text-xs font-light text-foreground tracking-wider">{marketData.metrics?.confidence?.label}</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="lg:col-span-6 lg:col-start-1 lg:row-start-1">
        <div class="h-80 w-full group cursor-pointer opacity-100 translate-y-0 transition-all duration-1000 delay-200" data-animate="market-chart">
          <div class="w-full h-full flex items-center justify-center border border-dashed border-foreground/20 rounded-lg">
            <p class="text-foreground/50 text-center whitespace-pre-line">
              {marketData.chartPlaceholder}
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('astro:page-load', () => {
    const observerOptions = {
      threshold: 0.2,
      rootMargin: '0px'
    };

    // Observe elements with progressive delays
    const elementsWithDelays = [
      { selector: '[data-animate="market-content"]', delay: 0 },
      { selector: '[data-animate="market-chart"]', delay: 200 }
    ];

    elementsWithDelays.forEach(({ selector, delay }) => {
      const element = document.querySelector(selector);
      if (element) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const targetElement = entry.target as HTMLElement;
              setTimeout(() => {
                targetElement.classList.remove('opacity-0', 'translate-y-10');
                targetElement.classList.add('opacity-100', 'translate-y-0');
              }, delay);
            }
          });
        }, observerOptions);

        observer.observe(element);
      }
    });
  });
</script>