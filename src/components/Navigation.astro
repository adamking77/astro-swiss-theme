---
import { getNavigationLinks, getBrandConfig, isFeatureEnabled, getContainerClass } from '../lib/theme-utils';
import type { NavLink } from '../config/theme.config';

const { pathname } = Astro.url;
const isHome = pathname === '/';

// Get theme configuration
const brandConfig = getBrandConfig();
const showThemeToggle = isFeatureEnabled('hero'); // Use a feature flag or create specific navigation config

// Get navigation links from theme config
const headerLinks = getNavigationLinks('header');

// Filter links based on page type (home vs other pages)
const desktopNavLinks = headerLinks;
const mobileNavLinks = headerLinks;

const containerClass = getContainerClass();
---

<nav id="main-nav" class="fixed top-0 left-0 right-0 z-50 transition-all duration-300 bg-transparent">
  <div class={containerClass.replace('max-w-6xl mx-auto px-6 lg:px-8', '') || 'max-w-6xl mx-auto px-6 lg:px-8'}>
    <div id="nav-content-container" class="flex items-center justify-between transition-all duration-300 h-20 lg:h-24">
      <a href="/" id="nav-logo" class="font-light tracking-wide text-foreground transition-all duration-300 text-lg">
        {brandConfig.name}
      </a>
      
      {/* Desktop Navigation - RIGHT SIDE */}
      <div class="hidden md:flex items-center space-x-8">
        {desktopNavLinks.map((link: NavLink) => (
          link.id ? (
            <button
              data-scroll-to={link.id}
              class="nav-link font-light tracking-wide text-foreground/70 hover:text-foreground micro-interaction-subtle transition-all duration-300 text-sm"
            >
              {link.label}
            </button>
          ) : (
            <a
              href={link.href}
              target={link.external ? '_blank' : undefined}
              rel={link.external ? 'noopener noreferrer' : undefined}
              class="nav-link font-light tracking-wide text-foreground/70 hover:text-foreground micro-interaction-subtle transition-all duration-300 text-sm"
            >
              {link.label}
              {link.external && (
                <svg class="ml-1 w-3 h-3 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                </svg>
              )}
            </a>
          )
        ))}
        <div class="pl-4 border-l border-foreground/10">
          <div id="theme-toggle-desktop-container" class="transition-all duration-300 scale-100">
            <button
              type="button"
              role="switch"
              aria-checked="false"
              aria-label="Switch to dark mode"
              class="theme-toggle relative inline-flex items-center justify-center w-[50px] h-[26px] rounded-full p-0.5 transition-colors duration-200 ease-in-out focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background bg-slate-200 dark:bg-slate-700"
            >
              <span class="sr-only">Toggle theme</span>
              
              <!-- Sun Icon -->
              <span class="absolute left-[4px] transition-opacity duration-300 ease-in-out opacity-100 dark:opacity-50">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-slate-800 dark:text-slate-300">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z" />
                </svg>
              </span>
              
              <!-- Moon Icon -->
              <span class="absolute right-[4px] transition-opacity duration-300 ease-in-out opacity-50 dark:opacity-100">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-slate-800 dark:text-slate-300">
                  <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z" />
                </svg>
              </span>
              
              <!-- Toggle Slider -->
              <span class="pointer-events-none inline-block w-[20px] h-[20px] transform rounded-full bg-white shadow-lg ring-0 transition-transform duration-300 ease-in-out translate-x-[-12px] dark:translate-x-[12px]" />
            </button>
          </div>
        </div>
      </div>

      {/* Mobile Menu Button */}
      <button id="mobile-menu-button" aria-label="Toggle mobile menu" class="md:hidden p-2">
        <svg id="menu-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="text-foreground transition-all duration-300 h-5 w-5">
          <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
        </svg>
        <svg id="x-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="text-foreground transition-all duration-300 h-5 w-5 hidden">
          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
  </div>

  {/* Mobile Menu */}
  <div id="mobile-menu" class="hidden md:hidden bg-background border-t border-foreground/10">
    <div class="px-2 pt-8 pb-6 space-y-6">
      {mobileNavLinks.map((link: NavLink) => (
         link.id ? (
          <button
            data-scroll-to={link.id}
            class="mobile-nav-link block w-full text-left px-3 py-2 text-sm font-light tracking-wide text-foreground/70 hover:text-foreground micro-interaction-subtle transition-colors"
          >
            {link.label}
          </button>
        ) : (
          <a
            href={link.href}
            target={link.external ? '_blank' : undefined}
            rel={link.external ? 'noopener noreferrer' : undefined}
            class="mobile-nav-link block w-full text-left px-3 py-2 text-sm font-light tracking-wide text-foreground/70 hover:text-foreground micro-interaction-subtle transition-colors"
          >
            {link.label}
            {link.external && (
              <svg class="ml-1 w-3 h-3 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
              </svg>
            )}
          </a>
        )
      ))}
      <div class="px-3 py-2 border-t border-foreground/10 pt-4">
        <button
          type="button"
          role="switch"
          aria-checked="false"
          aria-label="Switch to dark mode"
          class="theme-toggle relative inline-flex items-center justify-center w-[50px] h-[26px] rounded-full p-0.5 transition-colors duration-200 ease-in-out focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background bg-slate-200 dark:bg-slate-700"
        >
          <span class="sr-only">Toggle theme</span>
          
          <!-- Sun Icon -->
          <span class="absolute left-[4px] transition-opacity duration-300 ease-in-out opacity-100 dark:opacity-50">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-slate-800 dark:text-slate-300">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z" />
            </svg>
          </span>
          
          <!-- Moon Icon -->
          <span class="absolute right-[4px] transition-opacity duration-300 ease-in-out opacity-50 dark:opacity-100">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-4 h-4 text-slate-800 dark:text-slate-300">
              <path stroke-linecap="round" stroke-linejoin="round" d="M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z" />
            </svg>
          </span>
          
          <!-- Toggle Slider -->
          <span class="pointer-events-none inline-block w-[20px] h-[20px] transform rounded-full bg-white shadow-lg ring-0 transition-transform duration-300 ease-in-out translate-x-[-12px] dark:translate-x-[12px]" />
        </button>
      </div>
    </div>
  </div>
</nav>

<!-- Navigation JavaScript - Inlined for production compatibility -->
<script>
/**
 * Navigation interaction handler
 * Manages scroll effects, mobile menu, and smooth scrolling
 */
class NavigationManager {
  constructor() {
    this.nav = null;
    this.navContentContainer = null;
    this.navLogo = null;
    this.desktopNavLinks = [];
    this.themeToggleDesktopContainer = null;
    this.mobileMenuButton = null;
    this.menuIcon = null;
    this.xIcon = null;
    this.mobileMenu = null;
    this.isMobileMenuOpen = false;
    
    this.init();
  }

  init() {
    // Wait for DOM to be ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => this.setupElements());
    } else {
      this.setupElements();
    }
  }

  setupElements() {
    this.nav = document.getElementById('main-nav');
    this.navContentContainer = document.getElementById('nav-content-container');
    this.navLogo = document.getElementById('nav-logo');
    this.desktopNavLinks = document.querySelectorAll('.nav-link');
    this.themeToggleDesktopContainer = document.getElementById('theme-toggle-desktop-container');
    this.mobileMenuButton = document.getElementById('mobile-menu-button');
    this.menuIcon = document.getElementById('menu-icon');
    this.xIcon = document.getElementById('x-icon');
    this.mobileMenu = document.getElementById('mobile-menu');

    if (this.allElementsPresent()) {
      this.bindEvents();
      this.handleScroll(); // Initial check
    }
  }

  allElementsPresent() {
    return this.nav && this.navContentContainer && this.navLogo && 
           this.themeToggleDesktopContainer && this.menuIcon && this.xIcon;
  }

  bindEvents() {
    // Throttled scroll handler for better performance
    let ticking = false;
    const throttledScroll = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          this.handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    };
    
    window.addEventListener('scroll', throttledScroll, { passive: true });
    
    // Mobile menu toggle
    if (this.mobileMenuButton) {
      this.mobileMenuButton.addEventListener('click', () => this.toggleMobileMenu());
    }

    // Smooth scrolling for anchor links
    document.querySelectorAll('button[data-scroll-to]').forEach(button => {
      button.addEventListener('click', (event) => {
        const target = event.currentTarget;
        if (target instanceof HTMLElement && target.dataset.scrollTo) {
          this.scrollToSection(target.dataset.scrollTo);
        }
      });
    });
    
    // Close mobile menu on navigation
    document.querySelectorAll('#mobile-menu a.mobile-nav-link').forEach(link => {
      link.addEventListener('click', () => {
        if (this.isMobileMenuOpen) {
          const href = link.getAttribute('href');
          if (href && (href.startsWith('/') || !href.startsWith('#'))) {
            this.toggleMobileMenu();
          }
        }
      });
    });
  }

  handleScroll() {
    const isScrolled = window.scrollY > 50;
    
    if (isScrolled) {
      this.applyScrolledStyles();
    } else {
      this.removeScrolledStyles();
    }
  }

  applyScrolledStyles() {
    this.nav.classList.add('bg-background/90', 'backdrop-blur-md', 'border-b', 'border-foreground/10');
    this.nav.classList.remove('bg-transparent');
    
    this.navContentContainer.classList.remove('h-20', 'lg:h-24');
    this.navContentContainer.classList.add('h-14', 'lg:h-16');
    
    this.navLogo.classList.remove('text-lg');
    this.navLogo.classList.add('text-base');
    
    this.desktopNavLinks.forEach(link => {
      link.classList.remove('text-sm');
      link.classList.add('text-xs');
    });
    
    this.themeToggleDesktopContainer.classList.remove('scale-100');
    this.themeToggleDesktopContainer.classList.add('scale-90');

    this.updateIconSizes('h-4', 'w-4');
  }

  removeScrolledStyles() {
    this.nav.classList.remove('bg-background/90', 'backdrop-blur-md', 'border-b', 'border-foreground/10');
    this.nav.classList.add('bg-transparent');
    
    this.navContentContainer.classList.remove('h-14', 'lg:h-16');
    this.navContentContainer.classList.add('h-20', 'lg:h-24');
    
    this.navLogo.classList.remove('text-base');
    this.navLogo.classList.add('text-lg');
    
    this.desktopNavLinks.forEach(link => {
      link.classList.remove('text-xs');
      link.classList.add('text-sm');
    });
    
    this.themeToggleDesktopContainer.classList.remove('scale-90');
    this.themeToggleDesktopContainer.classList.add('scale-100');

    this.updateIconSizes('h-5', 'w-5');
  }

  updateIconSizes(heightClass, widthClass) {
    const currentHeight = heightClass === 'h-4' ? 'h-5' : 'h-4';
    const currentWidth = widthClass === 'w-4' ? 'w-5' : 'w-4';
    
    this.menuIcon.classList.replace(currentHeight, heightClass);
    this.menuIcon.classList.replace(currentWidth, widthClass);
    this.xIcon.classList.replace(currentHeight, heightClass);
    this.xIcon.classList.replace(currentWidth, widthClass);
  }

  scrollToSection(sectionId) {
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
      if (this.isMobileMenuOpen) {
        this.toggleMobileMenu();
      }
    }
  }

  toggleMobileMenu() {
    this.isMobileMenuOpen = !this.isMobileMenuOpen;
    if (this.mobileMenu && this.menuIcon && this.xIcon) {
      this.mobileMenu.classList.toggle('hidden');
      this.menuIcon.classList.toggle('hidden');
      this.xIcon.classList.toggle('hidden');
    }
  }
}

// Initialize navigation when script loads
new NavigationManager();
</script>

<!-- Theme Toggle JavaScript -->
<script>
// Simple theme toggle script - inlined for production compatibility
document.addEventListener('DOMContentLoaded', () => {
  const themeToggleButtons = document.querySelectorAll('.theme-toggle');
  
  // Get current theme
  const getTheme = () => {
    const stored = localStorage.getItem('astro-ui-theme');
    if (stored && stored !== 'system') return stored;
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  };
  
  // Apply theme to DOM
  const applyTheme = (theme) => {
    document.documentElement.classList.remove('light', 'dark');
    document.documentElement.classList.add(theme);
    document.documentElement.setAttribute('data-theme', theme);
  };
  
  // Initialize theme
  const currentTheme = getTheme();
  applyTheme(currentTheme);
  
  // Update toggle buttons visual state
  const updateToggleButtons = (theme) => {
    themeToggleButtons.forEach(button => {
      const isDark = theme === 'dark';
      button.setAttribute('aria-checked', isDark);
      button.setAttribute('aria-label', `Switch to ${isDark ? 'light' : 'dark'} mode`);
      
      // Update classes for styling
      if (isDark) {
        button.classList.add('dark-mode');
        button.classList.remove('light-mode');
      } else {
        button.classList.add('light-mode');
        button.classList.remove('dark-mode');
      }
    });
  };
  
  // Set up toggle functionality
  themeToggleButtons.forEach(button => {
    button.addEventListener('click', () => {
      const current = getTheme();
      const newTheme = current === 'dark' ? 'light' : 'dark';
      
      localStorage.setItem('astro-ui-theme', newTheme);
      applyTheme(newTheme);
      updateToggleButtons(newTheme);
    });
  });
  
  // Initial button state update
  updateToggleButtons(currentTheme);
});
</script>