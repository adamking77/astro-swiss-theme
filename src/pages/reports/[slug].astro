---
import BaseLayout from '../../layouts/BaseLayout.astro';
import CTA from '../../components/sections/CTA.astro';
import { Image } from 'astro:assets';
import { getCollection, getEntry, type CollectionEntry } from 'astro:content';
import ExecutiveSummary from '../../components/reports/ExecutiveSummary.astro';
import DataVisualization from '../../components/reports/DataVisualization.astro';
import FinancialHighlights from '../../components/reports/FinancialHighlights.astro';
import ClientInsights from '../../components/reports/ClientInsights.astro';
import MarketAnalysis from '../../components/reports/MarketAnalysis.astro';
import IndustryTrends from '../../components/reports/IndustryTrends.astro';
import FutureOutlook from '../../components/reports/FutureOutlook.astro';
import PerformanceMetrics from '../../components/reports/PerformanceMetrics.astro';
import RegionalPerformance from '../../components/reports/RegionalPerformance.astro';
import TechnologyStack from '../../components/reports/TechnologyStack.astro';
import ChartWrapper from '../../components/reports/ChartWrapper.astro';
import ContentRenderer from '../../components/ContentRenderer.astro';
import ScrollAnimator from '../../components/interactive/ScrollAnimator.tsx';
import { parseContentSections, getLayoutClasses, getProseClasses, processMarkdownToHTML } from '../../utils/contentSections.ts';

// TypeScript interfaces for better type safety
interface ReportSection {
  component: string;
  key: string;
  data?: Record<string, any>;
}

interface RelatedReport {
  id: string;
  slug: string;
  title: string;
  description: string;
  category: string;
  readTime: string;
}

export interface Props {
  entry: CollectionEntry<'reports'>;
}

export async function getStaticPaths() {
  const reports = await getCollection('reports');
  return reports.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;

// Validate entry exists
if (!entry) {
  return new Response(null, {
    status: 404,
    statusText: 'Report not found'
  });
}

// Handle both Markdown content and JSON data
const report = entry.data;
const hasBodyContent: boolean = Boolean(entry.body && entry.body.trim() !== '');

// If there's Markdown content, render it
let Content: any = null;
if (hasBodyContent) {
  try {
    const rendered = await entry.render();
    Content = rendered.Content;
  } catch (error: unknown) {
    console.error('Error rendering report content:', error);
    Content = null;
  }
}

if (!report) {
  return new Response(null, {
    status: 404, 
    statusText: 'Report data not found'
  });
}

// Use sections from content data or fallback to default
const reportSections: ReportSection[] = report.sections || [
  { component: 'ExecutiveSummary', key: 'executive' },
  { component: 'DataVisualization', key: 'data-viz' }
];

// Parse content sections for new sectioning system
let parsedSections: any[] = [];
if (report.contentSections && hasBodyContent) {
  parsedSections = parseContentSections(entry.body, report.contentSections);
  
  // Process markdown sections to HTML
  for (const section of parsedSections) {
    if (section.type === 'markdown' && section.content) {
      section.processedContent = await processMarkdownToHTML(section.content);
    }
  }
}

// Get related reports with error handling
let relatedReports: RelatedReport[] = [];
try {
  const allReports = await getCollection('reports');
  relatedReports = allReports
    .filter((r): r is CollectionEntry<'reports'> => 
      r.id !== entry.id && r.data.published !== false
    )
    .slice(0, 2)
    .map((r): RelatedReport => ({
      ...r.data,
      id: r.id,
      slug: r.slug
    }));
} catch (error: unknown) {
  console.error('Error loading related reports:', error);
}
---

<BaseLayout 
  title={report.seoTitle || report.title}
  description={report.seoDescription || report.subtitle || report.description}
>
  <!-- Enhanced SEO Meta Tags -->
  <meta slot="head" property="og:title" content={report.seoTitle || report.title} />
  <meta slot="head" property="og:description" content={report.seoDescription || report.description} />
  <meta slot="head" property="og:type" content="article" />
  <meta slot="head" property="og:url" content={report.canonicalUrl || `${Astro.site}reports/${entry.slug}/`} />
  {report.image && <meta slot="head" property="og:image" content={report.image} />}
  
  <!-- Twitter Card Meta Tags -->
  <meta slot="head" name="twitter:card" content="summary_large_image" />
  <meta slot="head" name="twitter:title" content={report.seoTitle || report.title} />
  <meta slot="head" name="twitter:description" content={report.seoDescription || report.description} />
  {report.image && <meta slot="head" name="twitter:image" content={report.image} />}
  
  <!-- Article Meta Tags -->
  <meta slot="head" name="article:author" content={report.author} />
  <meta slot="head" name="article:published_time" content={report.publishDate} />
  {report.lastModified && <meta slot="head" name="article:modified_time" content={report.lastModified} />}
  <meta slot="head" name="article:section" content={report.category} />
  {report.tags?.map(tag => <meta slot="head" name="article:tag" content={tag} />)}
  
  <!-- Canonical URL -->
  {report.canonicalUrl && <link slot="head" rel="canonical" href={report.canonicalUrl} />}
  
  <!-- Structured Data (JSON-LD) -->
  <script slot="head" type="application/ld+json">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": "Article",
      "headline": report.title,
      "description": report.description,
      "author": {
        "@type": "Organization",
        "name": report.author
      },
      "publisher": {
        "@type": "Organization", 
        "name": "Swiss Astro Theme",
        "url": Astro.site
      },
      "datePublished": report.publishDate,
      "dateModified": report.lastModified || report.publishDate,
      "articleSection": report.category,
      "keywords": report.tags?.join(", "),
      "url": report.canonicalUrl || `${Astro.site}reports/${entry.slug}/`,
      ...(report.image && { "image": report.image })
    })}
  </script>
  <!-- Header -->
  <section class="pt-32 pb-16 lg:pt-40 lg:pb-24">
    <div class="max-w-7xl mx-auto px-6 lg:px-8">
      <ScrollAnimator client:load threshold={0.1} duration={1000}>
        <div class="space-y-8">
          <a 
            href="/reports" 
            class="inline-flex items-center space-x-2 text-foreground/70 hover:text-foreground transition-colors group"
          >
            <svg class="h-4 w-4 group-hover:-translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            <span class="text-sm font-light tracking-wide">Back to Reports</span>
          </a>
        
        <div class="grid lg:grid-cols-3 gap-12">
          <div class="lg:col-span-2 space-y-8">
            <div class="space-y-4">
              <div class="flex items-center space-x-3">
                <span class="px-3 py-1 bg-foreground/10 text-foreground text-xs font-light rounded-full">
                  {report.category}
                </span>
                {report.featured && (
                  <span class="px-3 py-1 bg-foreground/10 text-foreground text-xs font-light rounded-full">
                    Featured
                  </span>
                )}
              </div>
              
              <h2 class="text-3xl md:text-4xl lg:text-5xl font-light leading-[1.1] tracking-tight text-foreground">
                {report.title}
              </h1>
              
              <p class="text-xl font-light text-foreground/70 leading-relaxed">
                {report.subtitle}
              </p>
            </div>
            
            <div class="prose prose-lg max-w-none">
              <p class="text-lg font-light text-foreground/80 leading-relaxed">
                {report.description}
              </p>
            </div>

            {/* Featured Image */}
            {report.image && (
              <div class="mt-8">
                <Image
                  src={report.image}
                  alt={report.title}
                  width={800}
                  height={400}
                  class="w-full h-64 object-cover rounded-lg"
                  loading="eager"
                  format="webp"
                />
              </div>
            )}
          </div>
          
          <div class="space-y-8">
            <div class="bg-foreground/5 rounded-lg p-6 space-y-6">
              <h3 class="text-lg font-light text-foreground">Report Details</h3>
              
              <div class="space-y-4">
                <div class="flex items-center space-x-3">
                  <svg class="h-4 w-4 text-foreground/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                  <span class="text-sm font-light text-foreground">{report.author}</span>
                </div>
                <div class="flex items-center space-x-3">
                  <svg class="h-4 w-4 text-foreground/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  <span class="text-sm font-light text-foreground">{report.publishDate}</span>
                </div>
                <div class="flex items-center space-x-3">
                  <svg class="h-4 w-4 text-foreground/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  <span class="text-sm font-light text-foreground">{report.readTime}</span>
                </div>
              </div>
              
              <div class="space-y-3">
                <div class="flex items-center space-x-2">
                  <svg class="h-4 w-4 text-foreground/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                  </svg>
                  <span class="text-sm font-light text-foreground">Tags</span>
                </div>
                <div class="flex flex-wrap gap-2">
                  {report.tags?.map((tag, index) => (
                    <span key={`tag-${index}-${tag}`} class="px-2 py-1 bg-foreground/10 text-foreground text-xs font-light rounded">
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
        </div>
      </ScrollAnimator>
    </div>
  </section>

  <!-- New Section-Based Content Rendering -->
  {parsedSections.length > 0 ? (
    <!-- Render content sections with mixed layouts -->
    <div class="content-sections">
      {parsedSections.map((section, index) => {
        const sectionKey = `parsed-section-${index}`;
        
        if (section.type === 'markdown' && section.processedContent) {
          const layoutClasses = getLayoutClasses(section.layout);
          const proseClasses = getProseClasses(section.layout);
          
          return (
            <ScrollAnimator client:load threshold={0.2} duration={800} delay={index * 100}>
              <section key={sectionKey} class="py-16 lg:py-20">
                <div class={layoutClasses}>
                  <article class={proseClasses} set:html={section.processedContent} />
                </div>
              </section>
            </ScrollAnimator>
          );
        }
        
        if (section.type === 'component') {
          return (
            <ScrollAnimator client:load threshold={0.2} duration={800} delay={index * 100}>
              <div key={sectionKey}>
                <ContentRenderer sections={[section]} />
              </div>
            </ScrollAnimator>
          );
        }
        
        return null;
      })}
    </div>
  ) : (
    <!-- Fallback to legacy content rendering -->
    <div>
      {/* Render Markdown Content if available */}
      {hasBodyContent && Content && (
        <section class="py-16 lg:py-20">
          <div class="max-w-4xl mx-auto px-6 lg:px-8">
            <article class="prose prose-lg max-w-none prose-headings:font-light prose-headings:tracking-tight prose-p:font-light prose-p:leading-relaxed prose-a:text-accent prose-a:no-underline hover:prose-a:underline">
              <Content />
            </article>
          </div>
        </section>
      )}

      {/* Render Layout Components */}
      <ContentRenderer components={report.components} />

      {/* Render structured sections if no Markdown content */}
      {!hasBodyContent && reportSections?.map((section, index) => {
        const sectionData = report.sectionData?.[section.key] || section.data || {};
        const sectionKey = `section-${index}-${section.key || section.component}`;
        return (
          <ScrollAnimator client:load threshold={0.2} duration={800} delay={index * 150}>
            <div key={sectionKey}>
              {section.component === 'ExecutiveSummary' && <ExecutiveSummary data={sectionData} />}
              {section.component === 'PerformanceMetrics' && <PerformanceMetrics data={sectionData} />}
              {section.component === 'RegionalPerformance' && <RegionalPerformance data={sectionData} />}
              {section.component === 'TechnologyStack' && <TechnologyStack data={sectionData} />}
              {section.component === 'DataVisualization' && <DataVisualization data={sectionData} />}
              {section.component === 'FinancialHighlights' && <FinancialHighlights data={sectionData} />}
              {section.component === 'ClientInsights' && <ClientInsights data={sectionData} />}
              {section.component === 'MarketAnalysis' && <MarketAnalysis data={sectionData} />}
              {section.component === 'IndustryTrends' && <IndustryTrends data={sectionData} />}
              {section.component === 'FutureOutlook' && <FutureOutlook data={sectionData} />}
            </div>
          </ScrollAnimator>
        );
      })}
    </div>
  )}

  <!-- Related Reports -->
  {relatedReports.length > 0 && (
    <section class="py-16 lg:py-24 bg-foreground/5">
      <div class="max-w-7xl mx-auto px-6 lg:px-8">
        <div class="space-y-12">
          <ScrollAnimator client:load threshold={0.2} duration={800}>
            <h2 class="text-3xl font-light tracking-tight text-foreground">
              Related Reports
            </h2>
          </ScrollAnimator>
          
          <div class="grid md:grid-cols-2 gap-8">
            {relatedReports?.map((relatedReport, index) => (
              <ScrollAnimator client:load threshold={0.2} duration={800} delay={index * 150}>
                <a
                  key={`related-${index}-${relatedReport.id}`}
                  href={`/reports/${relatedReport.slug}/`}
                  class="group block bg-background border border-foreground/10 rounded-lg p-6 hover:border-foreground/30 hover:shadow-xl transition-all duration-300"
                >
                  <div class="space-y-4">
                    <div class="flex items-center justify-between">
                      <span class="px-3 py-1 bg-foreground/10 text-foreground text-xs font-light rounded-full">
                        {relatedReport.category}
                      </span>
                      <span class="text-xs font-light text-foreground/60">
                        {relatedReport.readTime}
                      </span>
                    </div>
                    
                    <h3 class="text-xl font-light text-foreground group-hover:text-foreground/80 transition-colors">
                      {relatedReport.title}
                    </h3>
                    
                    <p class="text-sm font-light text-foreground/70 line-clamp-2">
                      {relatedReport.description}
                    </p>
                    
                    <div class="text-xs font-light text-foreground group-hover:text-foreground/70 transition-colors">
                      Read Report →
                    </div>
                  </div>
                </a>
              </ScrollAnimator>
            ))}
          </div>
        </div>
      </div>
    </section>
  )}

  <CTA />
</BaseLayout>